import tensorflow as tf
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import numpy as np

(x_train, y_train),(x_test, y_test) = tf.keras.datasets.cifar10.load_data()

print('Image shape for training',x_train.shape)
print('Image shape for training',y_train.shape)
print('Image shape for testing',x_train.shape)
print('Image shape for testing',y_train.shape)

def rgb_to_grayscale(images):
    return np.dot(images, [0.299,0.587,0.114])

x_test_grayscale = rgb_to_grayscale(x_test)

labels = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

classes, counts = np.unique(y_test, return_counts = True)
plt.barh(labels, counts)
plt.title('/nClass distribution in testing set')

n_images_to_visualize = 20

selected_images = x_test_grayscale[:n_images_to_visualize]
selected_labels = y_test[:n_images_to_visualize]

plt.figure(figsize=(15,6))
for i in range(n_images_to_visualize):
    plt.subplot(4,5,i + 1)
    plt.imshow(selected_images[i],cmap='gray')
    label_index = int(selected_labels[i])
    plt.title(labels[label_index])
    plt.axis('off')
plt.suptitle("Original Grayscale Images")
plt.show()

n_components = 150
x_test_grayscale = x_test_grayscale.reshape(x_test_grayscale.shape[0], -1)

scaler = StandardScaler()
x_test_scaled = scaler.fit_transform(x_test_grayscale)

pca = PCA(n_components=n_components)
x_test_pca = pca.fit_transform(x_test_scaled)

explained_variance_ratio = pca.explained_variance_ratio_

plt.figure()
plt.plot(np.cumsum(explained_variance_ratio))
plt.xlabel('NUMBER OF PRINCIPAL COMPONENTS')
plt.ylabel('CUMULATIVE EXPLAINED VARIANCE')
plt.title('EXPLAINED VARIANCE RATIO')
plt.grid()
plt.show()

print(f"Number of Samples: {x_test_scaled.shape[0]}")
print(f"Number of Principle Components: {n_components}")

reconstructed_images = pca.inverse_transform(x_test_pca)

reconstructed_images = reconstructed_images.reshape(10000, 32,32)

plt.figure(figsize=(15,6))
for i in range(n_images_to_visualize):
    plt.subplot(4,5,i+1)
    plt.imshow(reconstructed_images[i],cmap='gray')
    label_index = int(selected_labels[i])
    plt.title(labels[label_index])
    plt.axis('off')
plt.suptitle(f"transformed Iamges (Using {n_components} Components")
plt.show()

fig, ax = plt.subplots(2.10, figsize=(10,2.5),
                       subplot_kw={'xticks':[],'yticks':[]},
                       gridspec_kw=dict(hspace=0.1, wspace = 0.1))

for i in range (10):
    ax[0,i].imshow(x_test_scaled[i].reshape(32,32),cmap='gray')
    ax[1,i].imshow(pca.inverse_transform(x_test_pca[i]).reshape(32,32),cmap='gray')

ax[0,0].set_ylabel('full-dim\ninput')
ax[1,0].set_ylabel('150-dim\nreconstruction')

plt.show()